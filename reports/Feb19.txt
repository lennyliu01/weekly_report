这周主要是学习广义表和二叉树
从第68讲看到了第91讲，本来想看到第94讲但是没有完成目标
广义表可以镜像或者链式存储
广义表的基本操作为
创建广义表：可以通过递归的方式创建广义表，例如使用逗号和括号表示一个广义表，例如 (a, b, (c, d))。
访问广义表中的元素：广义表中的元素可以使用递归的方式访问。如果元素是单个数据项，直接返回该元素；如果元素是另一个广义表，递归访问该广义表。
获取广义表的长度：广义表的长度可以使用递归的方式计算。如果广义表为空，则长度为 0；如果广义表只有一个元素，则长度为 1；如果广义表有多个元素，则长度为每个元素的长度之和。
获取广义表的深度：广义表的深度可以使用递归的方式计算。如果广义表为空，则深度为 1；如果广义表只有一个元素，则深度为该元素的深度加 1；如果广义表有多个元素，则深度为所有元素的最大深度加 1。
合并广义表：可以使用递归的方式合并两个广义表，将两个广义表的元素合并成一个新的广义表。
删除广义表中的元素：可以使用递归的方式删除广义表中的元素。如果要删除的元素是单个数据项，直接删除该元素；如果要删除的元素是另一个广义表，递归删除该广义表中的元素。

总结了一下二叉树的特点和操作
二叉树是一种常用的数据结构，由一个根节点、左子树和右子树组成，每个节点最多只有两个子节点，
其中左子节点是其左子树的根节点，右子节点是其右子树的根节点，每个节点最多只有两个子节点，因此二叉树的结构比较简单，左子树和右子树是有序的，可以用于排序
常用的操作有：
插入：在二叉树中插入一个节点。插入操作需要考虑插入节点的位置，如果插入的节点比当前节点小，则插入到左子树，否则插入到右子树
删除：从二叉树中删除一个节点。删除操作需要考虑删除节点的子树，如果删除的节点没有子树，则直接删除；如果有一个子树，则用子树代替删除的节点；如果有两个子树，则找到左子树的最大节点或右子树的最小节点替代删除节点，然后删除该最大或最小节点。
查找：在二叉树中查找一个节点。查找操作需要遍历二叉树，根据节点大小判断向左或向右遍历，直到找到目标节点或者找到叶子节点。
遍历：遍历二叉树。有三种遍历方式：
a. 前序遍历（pre）：先遍历当前节点，然后遍历左子树，最后遍历右子树
b. 中序遍历（inorder)：先遍历左子树，然后遍历当前节点，最后遍历右子树
c. 后序遍历(post)：先遍历左子树，然后遍历右子树，最后遍历当前节点
获取树的深度
判断是否是完全二叉树
将二叉树左右子树交换
找最大或者最小的叶子
