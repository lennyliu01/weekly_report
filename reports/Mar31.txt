本周继续学习了查找方法（看到了第155讲）
重点看了看Binary search
1：
确定数据集的上下界，即 low = 0 和 high = len(data) - 1。
2.当 low <= high 时，重复以下步骤：
a. 计算中间值的索引：mid = (low + high) // 2。
b. 检查中间值与目标值的关系：
如果 data[mid] == target，则找到目标值，返回其索引 mid。
如果 data[mid] < target，则目标值位于中间值右侧，更新下界：low = mid + 1。
如果 data[mid] > target，则目标值位于中间值左侧，更新上界：high = mid - 1。
3：
最后如果循环结束，表示未找到目标值，返回 -1 或其他表示未找到的值。

不光看了教学视频，已经开始系统的刷题，在刷题的时候发现我对递归的方法不是很理解,经常溢出
后来花了一天重新复习了一下
发现是忘记定义base case，已经运算的顺序不明确
总结了一下递归算法的基本步骤：
1.确定问题的基本情况：确定一个或多个可以直接解决的简单情况，并为它们提供解决方案。这些基本情况是递归算法的终止条件，确保递归调用最终停止。
2.将问题分解为子问题：找出如何将问题分解为更小、更简单的子问题，这些子问题可以递归地应用相同的解决方法。
3.递归调用：在函数中调用自身，传入子问题作为参数。
4.合并子问题的解：在递归返回后，将子问题的解合并为原问题的解。


试着自己用三种算法（暴力，备忘录和动态）写了斐波那契和正整数的阶乘
https://github.com/lennyliu01/leetcode/tree/master/practices/recusion/factorial
https://github.com/lennyliu01/leetcode/tree/master/practices/recusion/fibonacci